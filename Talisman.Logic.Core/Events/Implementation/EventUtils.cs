using System;
using System.Collections.Generic;
using Talisman.Logic.Core.Cards.Abstract;
using Talisman.Logic.Core.Combat.Implementation;
using Talisman.Logic.Core.Events.Abstract;

namespace Talisman.Logic.Core.Events.Implementation;

/// <summary>
/// Static utility methods for event processing.
/// </summary>
public static class EventUtils
{
    /// <summary>
    /// Executes all combat dice roll events.
    /// </summary>
    ///
    /// <param name="combatInfo">Combat data.</param>
    /// <param name="fightables">Objects which events need to be executed.</param>
    /// <param name="combatDiceRolls">Combat dice roll results.</param>
    /// 
    /// <exception cref="ArgumentNullException"></exception>
    public static void ExecuteAllCombatDiceRollEvents(CombatInfo combatInfo, IEnumerable<IFightable> fightables, int[] combatDiceRolls)
    {
        foreach (var fightable in fightables)
        {
            ExecuteAll(fightable.GetCombatDiceRollEvents(combatInfo, combatDiceRolls));
        }
    }

    /// <summary>
    /// Executes all opponent combat dice roll events.
    /// </summary>
    ///
    /// <param name="combatInfo">Combat data.</param>
    /// <param name="fightables">Objects which events need to be executed.</param>
    /// <param name="opponentCombatDiceRolls">Opponent combat dice roll results.</param>
    /// 
    /// <exception cref="ArgumentNullException"></exception>
    public static void ExecuteAllOpponentCombatDiceRollEvents(CombatInfo combatInfo, IEnumerable<IFightable> fightables, int[] opponentCombatDiceRolls)
    {
        foreach (var fightable in fightables)
        {
            ExecuteAll(fightable.GetOpponentCombatDiceRollEvents(combatInfo, opponentCombatDiceRolls));
        }
    }

    /// <summary>
    /// Executes all pre-combat events and all events generated by them.
    /// </summary>
    /// 
    /// <param name="combatInfo">Combat data.</param>
    /// <param name="fightables">Objects which events need to be executed.</param>
    public static void ExecuteAllPreCombatEvents(CombatInfo combatInfo, IEnumerable<IFightable> fightables)
    {
        if (combatInfo == null) throw new ArgumentNullException(nameof(combatInfo));

        foreach (var fightable in fightables)
        {
            ExecuteAll(fightable.GetPreCombatEvents(combatInfo));
        }
    }

    /// <summary>
    /// Executes event <paramref name="event"/> and all other events generated by it.
    /// </summary>
    ///
    /// <param name="event">Event to execute.</param>
    public static void ExecuteAll(IEvent @event)
    {
        if (@event == null) throw new ArgumentNullException(nameof(@event));

        ExecuteAll(@event.Execute());
    }

    /// <summary>
    /// Executes events and all events generated by them using recursion.
    /// </summary>
    /// 
    /// <param name="events">Events to execute.</param>
    public static void ExecuteAll(IEnumerable<IEvent> events)
    {
        if (events == null)
        {
            return;
        }

        foreach (var e in events)
        {
            ExecuteAll(e.Execute());
        }
    }
}